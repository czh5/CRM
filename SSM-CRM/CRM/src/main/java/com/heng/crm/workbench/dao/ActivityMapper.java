package com.heng.crm.workbench.dao;

import com.heng.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 12 23:26:24 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 12 23:26:24 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 12 23:26:24 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Tue Apr 12 23:26:24 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * 插入新的市场活动
     * @param activity
     * @return
     */
    int insertActivity(Activity activity);

    /**
     * 根据条件分页查询查询市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /**
     * 根据条件查询市场活动总条数
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String,Object> map);

    /**
     * 根据id数组删除市场活动记录
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id查询市场活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);

    /**
     * 根据id修改市场活动
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有市场活动
     * @return
     */
    List<Activity> selectAllActivity();

    /**
     * 根据id查询部分市场活动
     * @param ids
     * @return
     */
    List<Activity> selectSomeActivityByIds(String[] ids);

    /**
     * 以list集合的方式插入新的市场活动
     * @param activityList  list集合
     * @return
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 根据id查询市场活动明细
     * @param id    id
     * @return
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索id查询市场活动明细
     * @param clueId    线索id
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据活动名模糊查询市场活动，并通过线索id查询已关联的活动，排除掉这些活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForDetailByActivityNameAndClueId(Map<String, Object> map);

    /**
     * 通过市场活动的id数组来查询市场活动
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据activityName和clueId查询已关联的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByActivityNameAndClueId(Map<String, Object> map);
}